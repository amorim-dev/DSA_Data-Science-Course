# exit RStudio
q()
# Exercise 1 - Create a vector with 30 integers
vector1 = c(1:30)
# Setting up the working directory
# Enclose the working directory you are using on your computer in quotes
# Do not use directories with spaces in the name
setwd("C:/FCD/BigDataRAzure/Cap02")
getwd()
setwd("~/Code/GITHUB_DSA/DSA_Data-Science-Course/1.BigData_RAzure/Ch2")
# Setting up the working directory
# Enclose the working directory you are using on your computer in quotes
# Do not use directories with spaces in the name
setwd("C:/FCD/BigDataRAzure/Cap02")
getwd()
# Setting up the working directory
# Enclose the working directory you are using on your computer in quotes
# Do not use directories with spaces in the name
setwd("C:/FCD/BigDataRAzure/Cap02")
getwd()
# Setting up the working directory
# Enclose the working directory you are using on your computer in quotes
# Do not use directories with spaces in the name
setwd("/home/bia/Code/GITHUB_DSA/DSA_Data-Science-Course/1.BigData_RAzure/Ch2")
getwd()
# Exercise 1 - Create a vector with 30 integers
vector1 = c(1:30)
vector1
# Exercise 2 - Create a matrix with 4 rows and 4 columns filled with integers
matrix1 = matrix(data = c(1:16), nrow = 4, ncol = 4)
matrix1
# ExercÃ­cio 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
list1 = list(vector1, matrix1)
list1
# Exercise 4 - Using the read.table() function read the file from the link below into a dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
?read.table()
princeton_data = read.table("http://data.princeton.edu/wws509/datasets/effort.dat")
?data.frame()
# Exercise 6 - Print the iris dataframe on the screen, check how many dimensions exist in the iris dataframe, and print a summary of the dataset
View(iris)
print(iris)
print(iris)
dim.data.frame(iris)
summary.data.frame(iris)
# Exercise 7 - Create a simple plot using the first two columns of the iris dataframe
plot(iris$Sepal.Length, iris$Sepal.Width)
# Exercise 7 - Create a simple plot using the first two columns of the iris dataframe
plot1 = plot(iris$Sepal.Length, iris$Sepal.Width)
plot1
# Exercise 7 - Create a simple plot using the first two columns of the iris dataframe
?plot
plot1 = plot(iris[1,2])
plot1 = plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Sepal.Width)
# Exercise 8 - Using the subset function, create a new dataframe with the iris dataframe data set where Sepal.Length > 7
# Tip: consult help to learn how to use the subset() function
?subset
subset1 = subset.data.frame(iris, Sepal.Length > 7)
subset1 = subset.(iris$Sepal.Length > 7)
subset1
df2 = subset.(iris$Sepal.Length > 7)
df2 = subset(iris$Sepal.Length > 7)
df2 = subset(iris, iris$Sepal.Length > 7)
df2
df2 = subset(iris, iris$Sepal.Length > 7)
df2
?copy()
?copy
df2 = subset(iris, Sepal.Length > 7)
df2
?slice()
# Exercise 9 (Challenge) - Create a dataframe that is a copy of the iris dataframe and using the slice() function, split the dataframe into a 15-line subset
# Hint 1: You will need to install and load the dplyr package
# Hint 2: Refer to help to learn how to use the slice() function
library(dplyr)
?slice()
iris3 = slice(iris2, n = 15)
iris3 = slice(iris2, prop = 15)
iris3 = slice(iris2, prop.table(15))
iris2 = data.frame(iris)
iris3 = slice(iris2, prop.table(15))
iris3
iris3 = slice(iris2, n = 15)
iris3
iris3 = slice(iris2, n = 15)
iris3 = slice(iris2, n(5))
iris3
iris2 = data.frame(iris)
iris2
iris3 = slice(iris2, (1:15))
iris3
iris2
# Exercise 10 - Use the filter function in your new dataframe created in the previous item and return only values where Sepal.Length > 6
# Tip: Use RSiteSearch to learn how to use the filter function
RSiteSearch(filter())
# Exercise 10 - Use the filter function in your new dataframe created in the previous item and return only values where Sepal.Length > 6
# Tip: Use RSiteSearch to learn how to use the filter function
??filter
filter(iris3, Sepal.Length > 6)
iris4 = filter(iris3, Sepal.Length > 6)
iris4
iris4 = filter(iris3, iris3$Sepal.Length > 6)
iris4
# Exercise 10 - Use the filter function in your new dataframe created in the previous item and return only values where Sepal.Length > 6
# Tip: Use RSiteSearch to learn how to use the filter function
RSiteSearch('filter')
iris4 = filter(iris3, Sepal.Length > 6)
iris4
iris3
# Exercise 6 - Print the iris dataframe on the screen,
# check how many dimensions exist in the iris dataframe,and print a summary of the dataset
iris
class(iris)
str(iris) # Do a summary and each datatype
df2 = subset(iris, Sepal.Length > 7)
df2
# Exercise 9 (Challenge) - Create a dataframe that is a copy of the iris dataframe and using the slice() function, split the dataframe into a 15-line subset
# Hint 1: You will need to install and load the dplyr package
# Hint 2: Refer to help to learn how to use the slice() function
library(dplyr)
iris3 = slice(iris2, (1:15))
iris3
class(slice(iris2, 1:15))
iris4 = filter(iris3, Sepal.Length > 6)
iris4
iris4 = filter(iris3, Sepal.Length > 7)
iris4
iris4 = filter(iris3, Sepal.Length > 1.4)
iris4
iris4 = filter(iris3, Sepal.Length > 1.5)
iris4
iris4 = filter(iris3, Sepal.Length > 3.5)
iris4
iris4 = filter(iris3, Sepal.Length > 4.5)
iris4
iris4 = filter(iris3, Sepal.Length > 5)
iris4
q()
