# exit RStudio
q()
setwd("~/Code/GITHUB_DSA/DSA_Data-Science-Course/1.BigData_RAzure/Ch3")
getwd()
# Setting WD
setwd("/home/bia/Code/GITHUB_DSA/DSA_Data-Science-Course/1.BigData_RAzure/Ch3")
getwd()
vec1 = 1:4
vec2 <- 1:4
class(vec1)
class(vec2)
typeof(vec1)
typeof(vec2)
# When you use the assignment symbol inside a function they behave in different ways
# "=" the operation of assignment exist only in time of execution, after that x does not exist anymore
# If you want keep the x value use "<-"
mean(x = 1:10)
x
mean(x <- 1:10)
x
vec2
lista1 <- (list(a=1:20), b=(45:77))
lista1 <- (list(a=(1:20), b=(45:77))
sapply(lista1, sum)
lista1 <- list(a=(1:20), b=(45:77))
sapply(lista1, sum)
setwd("~/Code/GITHUB_DSA/DSA_Data-Science-Course/1.BigData_RAzure/Ch3")
gc()
gc()
source("~/Code/GITHUB_DSA/DSA_Data-Science-Course/1.BigData_RAzure/Ch3/01-Factors-and-SortedFactors.R", echo=TRUE)
# Exercise 1 - Search for the function that lets you list all the files in the working directory
ls
# Exercise 1 - Search for the function that lets you list all the files in the working directory
ls
# Exercise 1 - Search for the function that lets you list all the files in the working directory
pwd
# Type of variables in the dataframe
str(df)
# Type of variables in the dataframe
str(df)
# Variables before transformation
levels(df$Ethnicity)
summary(df$Ethnicity)
# Levels of variables
df$Ethnicity <- as.factor(df$Ethnicity)
levels(df$Ethnicity)
summary(df$Ethnicity)
str(df)
# Plot
# Relationship between age and ethnicity
boxplot(df$Age ~ df$Ethnicity, xlab = 'Ethnicity', ylab = 'Age', main = 'Age X Ethnicity')
# Converting a column in categorical variable and specifying the categories
# We are adding this information in a new column
df
?cat
df$Marital.Status.cat <- factor(df$Marital.Status, labels = c('Single', 'Married', 'Divorced'))
df
df$Marital.Status2 <- factor(df$Marital.Status, labels = c('Single', 'Married', 'Divorced'))
df
?factor
# Sorting factors without hierarchy (We can say the hierarchy)
o.set1 <- factor(set1,
levels = c("CA", "BA", "AA", "CC", "B"),
ordered = TRUE)
o.set1
is.ordered(o.set1)
# Create vectors
vec1 <- c(1001, 1002, 1003, 1004, 1005)
vec2 <- c(0, 1, 1, 0, 2)
vec3 <- c('green', 'orange', 'blue', 'orange', 'green')
# Merging vectors into a dataframe
df <- data.frame(vec1, vec2, vec3)
df
# Checking eith R categorize the last column as factor
str(df)
# if not I can change with factor function
df$vec3 <- factor(df$vec3)
str(df)
# Creating a new column and assigning labels
# We transform a column generating a new one
df$cat1 <- factor(df$vec3, labels = c('cor2', 'cor1', 'cor3'))
df
# Creating a new column and assigning labels
# We transform a column generating a new one
df$vec3 <- factor(df$vec3, labels = c('cor2', 'cor1', 'cor3'))
df
# Merging vectors into a dataframe
df <- data.frame(vec1, vec2, vec3)
df
# Rep (something, number to repeat)
# rnorm - creat a normal distribution
rep(rnorm(10), 5)
# Rep (something, number to repeat)
# rnorm - creat a normal distribution
rep(rnorm(10), 5)
# Rep (something, number to repeat)
# rnorm - creat a normal distribution
rep(rnorm(10), 5)
# Rep (something, number to repeat)
# rnorm - creat a normal distribution
rep(rnorm(10), 5)
# Rep (something, number to repeat)
# rnorm - creat a normal distribution
rep(rnorm(10), 5)
# Rep (something, number to repeat)
# rnorm - creat a normal distribution
rep(rnorm(10), 5)
for (q in rnorm(10)) {print(q)}
# Exercise 1 - Search for the function that lets you list all the files in the working directory
dirs()
# Exercise 1 - Search for the function that lets you list all the files in the working directory
dir()
# Exercise 1 - Search for the function that lets you list all the files in the working directory
dir()
# Exercise 2 - Create a dataframe from 3 vectors: one of characters, one logical, and one of numbers
vec1 = c('char1', 'char2', 'char3')
vec2 = c(TRUE, FALSE, FALSE)
vec3 = c(1, 2, 3)
df = data.frame(vec1, vec2, vec3)
df
# Exercise 3 - Consider the array below.
# Create a loop that checks for numbers greater than 10 and prints the number and a message to the console.
vec1 <- c(12, 3, 4, 19, 34)
vec1
for(num in vec1){
if(num > 10){
print("Number: ", num)
}
}
# Exercise 3 - Consider the array below.
# Create a loop that checks for numbers greater than 10 and prints the number and a message to the console.
vec1 <- c(12, 3, 4, 19, 34)
vec1
for(num in vec1){
if(num > 10){
print("Number: ", num)
}
}
for(num in vec1){
if(num > 10){
paste("Number: ", num)
}
}
for(num in vec1){
if(num > 10){
paste("Number: ", num)
}
}
for(num in vec1){
if(num > 10){
print(num))
print(num)
# Exercise 4 - Consider the list below. Create a loop that prints to the console each element of the list
lst2 <- list(2, 3, 5, 7, 11, 13)
lst2
for(n in lst2){
print(n)
}
# Exercise 5 - Consider the two matrices below.
# Do an element-wise multiplication and normal multiplication between the matrices
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
mat2 <- t(mat1)
mat2
mat3 <- mat1 * mat2
mat3
mat4 <- mat1 %*% mat2
mat4
args(mean)
# To visualize the arguments of a function
args(sample)
args(sd) # Standard deviation
# Built-in fuctions
abs(-43)
args(mean)
# To visualize the arguments of a function
args(sample)
args(factor)
args(round)
round(c(1.1:5.8))
round(c(1.1:5.8),3)
round(c(1.1:5.8),2)
round(c(1.1:5.8),1)
round(c(1.1:5.8),0)
rev(c(1:5))
seq(1:5)
sort(rev(1:5))
append(c(1:5), 6)
# Rolling dice
rolling_dice <- function() {
num <- sample(1:6, size = 1) # local
num
}
rolling_dice()
rolling_dice()
# To visualize the arguments of a function
args(sample)
dir(a)
args(a)
sort(a)
sort.list(a)
# Exercise 9 - For the vector below, sort the values in ascending order
a <- c(100, 10, 10000, 1000)
a
sort(a)
args(list)
?list
# 1:10 numeric vector
# c() String vector
# rnorm() Normal distribution
list1 <- list(1:10, c('Zico', 'Ronaldo'), rnorm((10)))
# Named lists (Its Better to use in the slicing the name of the dimension)
names(list1) <- c('integers', 'characters', 'numerics')
list1
# Creating a named list
vec_num <- 1:4
vec_char <- c('A', 'B', 'C', 'D')
list2 = list(Numbers = vec_num, Letters = vec_char)
list2
names(lst1) <- c('num5', 'num6', 'num7')
lst1 <- list(5, 6, 7)
names(lst1) <- c('num5', 'num6', 'num7')
lst1
mt1 <-
args(matrix)
args(matrix)
mt <- (1:9, nrow = 3, ncol = 3, byrow = T)
mt <- (1:9, nrow = 3, ncol = 3, byrow = T)
mt <- (c(1:9), nrow = 3, ncol = 3, byrow = T)
mt <- (data = c(1:9), nrow = 3, ncol = 3, byrow = T)
matrix1 <- matrix(data = c(1:9), nrow = 3, ncol = 3, byrow = T)
matrix1
args(dimnames)
args(dimnames)
args(dimnames)
dimnames(matrix1) <- c('row1', 'row2', 'row3')
dimnames(matrix1) <- list(c('row1', 'row2', 'row3'))
matrix1
dimnames(matrix1) <- list(c('row1', 'row2', 'row3'), c('col1', 'col2', 'col3'))
matrix1
df <- data.frame(c(8:15))
df
df <- data.frame(c(8:10))
df
names(df) <- c('numbers')
df
?sample
# Exercise 7 - Consider the matrix below. Assign NA values randomly to 50 elements of the array
# Hint: use the sample() function
mat2 <- matrix(1:90, 10)
mat2
# Slicing
mat <- matrix(c(2,3,4,5), nr = 2)
mat
mat[1,2]
mat[,2]  # If you omit one of the values it considers all (all rows of column 2)
# Creating a diagonal matrix
matrix = 1:3
diag(matrix)
# Combining matrices
mat4 <- matrix(c(2,3,4,5), nr = 2)
mat4
# Deconstructing the Matrix (Transform the matrix in a vector (one dimension))
c(mat4)
# Creating vectors
country = c("Portugal", "England", "Ireland", "Egypt", "Brazil")
name = c("Bruno", "Tiago", "Amanda", "Bianca", "Marta")
height = c(1.88, 1.76, 1.53, 1.69, 1.68)
code = c(5001, 2183, 4702, 7965, 8890)
# Creating a data frame of many vectors
research = data.frame(country, name, height, code)
research
# Adding a new columns, a new vector to an existing data frame
eyes = c("green", "blue", "blue","brown", "brown")
research2 = cbind(research, eyes)  #(Union by column)
research2
dim(research2) # 5 5 (5 rows and 5 columns)
length(research2)
# Extracting a unique value
research2[1,1]
research2[3,2]
# Number of columns and rows
nrow(research2)
research2[3,2]
research2[height < 1.60, c('code', 'eyes')]
rownames(research2) <- c("Obs 1", "Obs 2", "Obs 3", "Obs 4", "Obs 5")
research2
# To visualize the arguments of a function
args(sample)
c(1:5)
sum(c(1:5))
# Exercise 7 - Consider the matrix below. Assign NA values randomly to 50 elements of the array
# Hint: use the sample() function
mat2 <- matrix(1:90, 10)
mat2
sample(mat2, size = 50)
# Exercise 7 - Consider the matrix below. Assign NA values randomly to 50 elements of the array
# Hint: use the sample() function
mat2 <- matrix(1:90, 10)
mat2
sample(mat2, size = 50, replace = TRUE)
# Exercise 7 - Consider the matrix below. Assign NA values randomly to 50 elements of the array
# Hint: use the sample() function
mat2 <- matrix(1:90, 10)
mat2
mat2 <- sample(mat2, size = 50, replace = TRUE)
mat2
# Exercise 7 - Consider the matrix below. Assign NA values randomly to 50 elements of the array
# Hint: use the sample() function
mat2 <- matrix(1:90, 10)
mat2
sample(mat2, size = 50, replace = TRUE)
for(i in mat2){
if(i in idx_sample){
for(i in mat2){
if(i in idx_sample){
# Ifelse
x = 5
ifelse (x < 6, 'Correct!', NA)
# Using a loop
list1 <- list(a = (1:20), b = (35:67))
list1
# Calculating the total of element in the list with for
value_a = 0
value_b = 0
for (i in list1$a){
value_a = value_a + i
}
for (j in list1$b){
value_b = value_b + j
}
print(value_a)
print(value_b)
# Using a loop
list1 <- list(a = (1:20), b = (35:67))
list1
# apply()
?apply
x <- matrix(c(20, 13, 65, 32, 45, 12, 76, 49, 82), nr = 3, byrow = T)
x
apply(x, 1, mean) # mean to each line of the matrix
apply(x, 2, mean) # mean to each row of the matrix
?apply
apply(mat1, 1, sum)
# ExercÃ­cio 8 - Para a matriz abaixo, calcule a soma por linha e por coluna
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
apply(mat1, 1, sum)
apply(mat1, 1, sum)
apply(mat1, 2, sum)
args(cbind)
cbind(mat1, row_sum)
row_sum <- apply(mat1, 1, sum) # Sum by row
column_sum <- apply(mat1, 2, sum) # Sum by column
cbind(mat1, row_sum)
cbind(mat1, column_sum)
rbind(mat1, column_sum)
for (i in mat2){
if (i in c(idx_sample)){
sort(a)
for (i in mat2){
if (i %in% c(idx_sample)){
mat2[i] = NA
}
}
# Exercise 7 - Consider the matrix below. Assign NA values randomly to 50 elements of the array
# Hint: use the sample() function
mat2 <- matrix(1:90, 10)
mat2
?sample
idx_sample = sample(mat2, size = 50)
for (i in mat2){
if (i %in% c(idx_sample)){
mat2[i] = NA
}
}
mat2
# Exercise 10 - Print to the console all elements of the matrix below that are greater than 15
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
for (i in mat1){
if (i > 15){
print(i)
}
}
list.files()
# Exercise 1 - Search for the function that lets you list all the files in the working directory
dir()
# Exercise 4 - Consider the list below. Create a loop that prints to the console each element of the list
lst2 <- list(2, 3, 5, 7, 11, 13)
lst2
for(n in lst2){
print(n)
}
# A better way would be:
mat3 <- matrix(1:90, 10)
mat3
mat3[sample(1:50), 10] = NA
mat3
mat3[sample(1:50, 10)] = NA
mat3
# Exercise 8 - For the matrix below, calculate the sum per row and per column
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
# Another way could be:
rowSums(mat1)
colSums(mat1)
row_sum <- apply(mat1, 1, sum) # Sum by row
column_sum <- apply(mat1, 2, sum) # Sum by column
row_sum
column_sum
# Exercise 9 - For the vector below, sort the values in ascending order
a <- c(100, 10, 10000, 1000)
a
sort(a)
# I can use order if I need the indices
order(a)
a[order(a)]
q()
